##############################################################################
# 📘 Documentation CI (Overview)
# ---------------------------------------------------------------------------
# Purpose:
# - Validate documentation markdown for broken links and minimal structure.
# - Provide a human-friendly summary of changed docs in the GitHub run summary.
# - Reduce docs regressions by catching 404s and missing top-level files early.
#
# Comment strategy:
# - Keep a concise top-of-file overview for maintainers
# - Add short per-step comments inside `steps` to explain 'why'
##############################################################################
name: Documentation CI

# Allow this workflow to push generated files to the repository (gh-pages)
permissions:
  contents: write

on:
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'jsdoc*.json'
      - 'scripts/**'
      - 'templates/**'
      - 'README.md'
      - '*.md'

  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'jsdoc*.json'
      - 'scripts/**'
      - 'templates/**'
      - 'README.md'
      - '*.md'

  workflow_dispatch: {}
    
jobs:
  validate-docs:
    runs-on: ubuntu-latest
    
    steps:
    # 1 Checkout repository (documentation files)
    #  Why: operate on the exact commit's docs so link-checks reference correct files
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 2 Validate Markdown links (link checker)
    #  Why: detect dead links early. The check uses the project's config file
    # to allow/deny patterns and fine-tune behavior.
    - name: Validate Markdown files
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/workflows/markdown-link-check-config.json'
        
    # 3 Check documentation structure (presence of high-level docs)
    #  Why: enforce minimal required files so docs navigation works in consumers
    - name: Check documentation structure
      run: |
        echo "Validating documentation structure..."
        
        # Check if required documentation files exist
        required_files=(
          "docs/README.md"
          "README.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo " Required file missing: $file"
            exit 1
          else
            echo " Found: $file"
          fi
        done
        
        echo " Documentation structure validation passed!"
        
    # 4 Generate a short summary for the run (human-friendly)
    #  Why: provide a step summary in the GitHub UI to help reviewers
    - name: Generate documentation summary
      run: |
        echo " Documentation Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "================================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo " **Files Changed:**" >> $GITHUB_STEP_SUMMARY
        
        # List changed markdown files (best-effort; falls back to empty when none)
        git diff --name-only HEAD~1 HEAD | grep -E '\\.(md|markdown)$' | while read file; do
          echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ℹ **Note:** This is a documentation-only update. No deployment was triggered." >> $GITHUB_STEP_SUMMARY

  publish-docs:
    needs: validate-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build documentation (JSDoc + Markdown)
        run: |
          # Ensure a clean output directory
          rm -rf docs/_site || true
          mkdir -p docs/_site
          # Build all documentation outputs: API reference and markdown -> HTML
          npm run docs:build

      - name: Create enterprise docs landing
        run: |
          # Remove any legacy generated site leftovers
          rm -rf docs/enterprise-api || true

          # Create a minimal landing page that links to the generated sections
          cat > docs/_site/index.html <<'HTML'
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width,initial-scale=1" />
            <title>Project Documentation  Restaurant Speisekarte</title>
            <style>
              body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; padding: 40px; color: #111 }
              a.button { display:inline-block; margin:8px 0; padding:12px 18px; background:#0366d6; color:#fff; text-decoration:none; border-radius:6px }
              .list { margin-top:20px }
            </style>
          </head>
          <body>
            <h1>Documentation for Restaurant Speisekarte</h1>
            <p>This site contains the generated API reference and the markdown-based architecture & deployment documentation.</p>

            <div class="list">
              <h2>Published docs</h2>
              <ul>
                <li><a class="button" href="./reference/">API Reference</a></li>
                <li><a class="button" href="./architecture-site/">Architecture Documentation</a></li>
                <li><a class="button" href="./deployment-site/">Deployment Documentation</a></li>
              </ul>
            </div>

            <footer style="margin-top:40px;color:#666">Published from the <code>master</code> branch via CI</footer>
          </body>
          </html>
          HTML

      - name: Post-process generated HTML links
        run: |
          # ensure node is available
          node --version
          node scripts/postprocess-links.js

      - name: Run site link-checker (fail on missing links)
        run: |
          node scripts/link-check.js

      - name: Ensure publish directory exists and is sane
        run: |
          # Verify the publish directory exists and is not empty
          if [ ! -d "${GITHUB_WORKSPACE}/docs/_site" ]; then
            echo "Publish dir does not exist: ${GITHUB_WORKSPACE}/docs/_site"
            exit 1
          fi

          if [ -z "$(ls -A ${GITHUB_WORKSPACE}/docs/_site)" ]; then
            echo "Publish dir is empty: ${GITHUB_WORKSPACE}/docs/_site"
            exit 1
          fi

          # Prevent accidental publish of the repository root
          if [ "$(realpath ${GITHUB_WORKSPACE}/docs/_site)" = "$(realpath ${GITHUB_WORKSPACE})" ]; then
            echo "Publish dir resolves to repo root; aborting."
            exit 1
          fi

          echo "Publish directory looks OK: ${GITHUB_WORKSPACE}/docs/_site"

      - name: Publish generated docs to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_site
          publish_branch: gh-pages
          user_name: docs-bot
          user_email: docs-bot@example.com
          allow_empty_commit: false
          keep_files: false
          force_orphan: true
